import uproot 
import matplotlib.pyplot as plt
import json
import os
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go


class JsonData:

    def __init__(self, json_gain):
        self.json_gain = json_gain
        self.gain_away = [] 


    def read_file(self):
        with open(self.json_gain, 'r') as file: 
            data = json.load(file)
        

        if "results" in data: 
            results = data["results"]
            
            if "innse_away" in results: 
                gain_away_list = results["innse_away"] 
                
                for sublist in gain_away_list:
                    self.gain_away.extend(sublist)
            
            else: 
                print("In results section, no gain_away list")
        else:
            return False
        


json_data = JsonData("N:\\CERN\\W3_Run_63\\results\\SN20USBHX2001092_20231009_63_4_RESPONSE_CURVE_PPA.json")
json_data.read_file()
#print(json_data.gain_away)
print(len(json_data.gain_away))


x = [] 
for i in range(1,1281): 
    x.append(i)
    


y = json_data.gain_away

line_trace = go.Scatter(
    x=x,
    y=json_data.gain_away,
    mode='lines',
    name='Noise in electrons'
)

# Layout
# Layout
shapes = []
for i in range(1, 1281):
    if i % 128 == 0:
        shapes.append(dict(type="line", xref="x", yref="paper", x0=i, y0=0, x1=i, y1=1, line=dict(color="gray", width=1)))
        
        

layout = go.Layout(
    title='Noise as a function of Channel',
    xaxis=dict(title='Channel Number', range=[200, 1281]), 
    yaxis=dict(title='Noise in electrons', range=[0, max(json_data.gain_away) * 1.5]),
    shapes = shapes
    
)


fig = go.Figure(data=[line_trace], layout=layout)


fig.show()
"""
plt.plot(x, y)

plt.xlabel('Channel Number')
plt.ylabel('Noise in electrons')
plt.title('Noise as a function of Channel')

plt.show()
"""

"""
fh = uproot.open(r"N:\CERN\W3_Run_63\data\strun63_4.root")

#print(fh.keys(recursive=False))

hist = fh[f'h_sigma0;2']

fh_sigma_1 = fh["h_sigma0;2"]

data_transposed = hist.values().T

#print(len(data_transposed))
sigma_values = []

for i in range(0,1280):
    sigma_values.append(data_transposed[i])
"""
#units for sigma, DAC counts? 

#print(sigma_values)
#print(len(sigma_values))
#print(len(json_data.gain_away))
#noise_in_electrons = [sigma_values / json_data.gain_away for sigma_values, json_data.gain_away in zip(sigma_values,json_data.gain_away)]

#print(noise_in_electrons)
#print(len(noise_in_electrons))
